
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx__echo_client_glue_h__PROXY_MARSHAL_H
#define __dbusxx__echo_client_glue_h__PROXY_MARSHAL_H

#include <dbus-c++/dbus.h>

namespace org {
namespace freedesktop {
namespace DBus {

class EchoDemo
 : public ::DBus::InterfaceProxy
{
public:

    EchoDemo()
    : ::DBus::InterfaceProxy("org.freedesktop.DBus.EchoDemo")
    {
        connect_signal(EchoDemo, Echoed, _Echoed_stub);
    }

public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    ::DBus::Int32 Random(  )
    {
        ::DBus::CallMessage call;
        call.member("Random");
        ::DBus::Message ret = invoke_method(call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Int32 argout;
        ri >> argout;
        return argout;
    }

    ::DBus::String Hello( const ::DBus::String& name )
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << name;
        call.member("Hello");
        ::DBus::Message ret = invoke_method(call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::String argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Variant Echo( const ::DBus::Variant& input )
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << input;
        call.member("Echo");
        ::DBus::Message ret = invoke_method(call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Variant argout;
        ri >> argout;
        return argout;
    }

    std::vector< ::DBus::Byte > Cat( const ::DBus::String& file )
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << file;
        call.member("Cat");
        ::DBus::Message ret = invoke_method(call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< ::DBus::Byte > argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Int32 Sum( const std::vector< ::DBus::Int32 >& ints )
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << ints;
        call.member("Sum");
        ::DBus::Message ret = invoke_method(call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Int32 argout;
        ri >> argout;
        return argout;
    }

    std::map< ::DBus::String, ::DBus::String > Info(  )
    {
        ::DBus::CallMessage call;
        call.member("Info");
        ::DBus::Message ret = invoke_method(call);
        ::DBus::MessageIter ri = ret.reader();

        std::map< ::DBus::String, ::DBus::String > argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */
    virtual void Echoed( const ::DBus::Variant& value ) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _Echoed_stub( const ::DBus::SignalMessage& sig )
    {
        ::DBus::MessageIter ri = sig.reader();

        ::DBus::Variant value; ri >> value;
        Echoed(value);
    }
};

} } } 
#endif//__dbusxx__echo_client_glue_h__PROXY_MARSHAL_H
