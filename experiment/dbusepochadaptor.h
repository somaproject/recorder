
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx__dbusepochadaptor_h__ADAPTOR_MARSHAL_H
#define __dbusxx__dbusepochadaptor_h__ADAPTOR_MARSHAL_H

#include <dbus-c++/dbus.h>

namespace soma {
namespace recording {

class Epoch
: public ::DBus::InterfaceAdaptor
{
public:

    Epoch()
    : ::DBus::InterfaceAdaptor("soma.recording.Epoch")
    {
        register_method(Epoch, GetName, _GetName_stub);
        register_method(Epoch, StartRecording, _StartRecording_stub);
        register_method(Epoch, StopRecording, _StopRecording_stub);
        register_method(Epoch, GetRecordingState, _GetRecordingState_stub);
        register_method(Epoch, EnableDataSink, _EnableDataSink_stub);
        register_method(Epoch, DisableDataSink, _DisableDataSink_stub);
        register_method(Epoch, GetDataSinks, _GetDataSinks_stub);
        register_method(Epoch, GetDataSink, _GetDataSink_stub);
        register_method(Epoch, SetDataName, _SetDataName_stub);
        register_method(Epoch, GetDataName, _GetDataName_stub);
        register_method(Epoch, GetSinkSessionStatistics, _GetSinkSessionStatistics_stub);
        register_method(Epoch, GetSessions, _GetSessions_stub);
        register_method(Epoch, AddEventRXMask, _AddEventRXMask_stub);
        register_method(Epoch, GetEventRXMask, _GetEventRXMask_stub);
        register_method(Epoch, RemoveEventRXMask, _RemoveEventRXMask_stub);
    }

    ::DBus::IntrospectedInterface *const introspect() const 
    {
        static ::DBus::IntrospectedArgument GetName_args[] = 
        {
            { "name", "s", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument StartRecording_args[] = 
        {
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument StopRecording_args[] = 
        {
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument GetRecordingState_args[] = 
        {
            { "isRecording", "b", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument EnableDataSink_args[] = 
        {
            { "src", "i", true },
            { "typ", "i", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument DisableDataSink_args[] = 
        {
            { "src", "i", true },
            { "typ", "i", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument GetDataSinks_args[] = 
        {
            { "result", "as", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument GetDataSink_args[] = 
        {
            { "src", "i", true },
            { "result", "ai", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument SetDataName_args[] = 
        {
            { "src", "i", true },
            { "name", "s", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument GetDataName_args[] = 
        {
            { "src", "i", true },
            { "name", "s", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument GetSinkSessionStatistics_args[] = 
        {
            { "src", "i", true },
            { "typ", "i", true },
            { "session", "i", true },
            { "stats", "a{ss}", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument GetSessions_args[] = 
        {
            { "sessions", "aai", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument AddEventRXMask_args[] = 
        {
            { "src", "i", true },
            { "cmdlist", "ai", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument GetEventRXMask_args[] = 
        {
            { "src", "i", true },
            { "cmdlist", "ai", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument RemoveEventRXMask_args[] = 
        {
            { "src", "i", true },
            { "cmdlist", "ai", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument sinkchange_args[] = 
        {
            { "sinksrc", "i", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument recordingstate_args[] = 
        {
            { "isRecording", "b", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedMethod Epoch_methods[] = 
        {
            { "GetName", GetName_args },
            { "StartRecording", StartRecording_args },
            { "StopRecording", StopRecording_args },
            { "GetRecordingState", GetRecordingState_args },
            { "EnableDataSink", EnableDataSink_args },
            { "DisableDataSink", DisableDataSink_args },
            { "GetDataSinks", GetDataSinks_args },
            { "GetDataSink", GetDataSink_args },
            { "SetDataName", SetDataName_args },
            { "GetDataName", GetDataName_args },
            { "GetSinkSessionStatistics", GetSinkSessionStatistics_args },
            { "GetSessions", GetSessions_args },
            { "AddEventRXMask", AddEventRXMask_args },
            { "GetEventRXMask", GetEventRXMask_args },
            { "RemoveEventRXMask", RemoveEventRXMask_args },
            { 0, 0 }
        };
        static ::DBus::IntrospectedMethod Epoch_signals[] = 
        {
            { "sinkchange", sinkchange_args },
            { "recordingstate", recordingstate_args },
            { 0, 0 }
        };
        static ::DBus::IntrospectedProperty Epoch_properties[] = 
        {
            { 0, 0, 0, 0 }
        };
        static ::DBus::IntrospectedInterface Epoch_interface = 
        {
            "soma.recording.Epoch",
            Epoch_methods,
            Epoch_signals,
            Epoch_properties
        };
        return &Epoch_interface;
    }

public:

    /* properties exposed by this interface, use
     * property() and property(value) to get and set a particular property
     */

public:

    /* methods exported by this interface,
     * you will have to implement them in your ObjectAdaptor
     */
    virtual std::string GetName() = 0;
    virtual void StartRecording() = 0;
    virtual void StopRecording() = 0;
    virtual bool GetRecordingState() = 0;
    virtual void EnableDataSink(const int32_t& src, const int32_t& typ) = 0;
    virtual void DisableDataSink(const int32_t& src, const int32_t& typ) = 0;
    virtual std::vector< std::string > GetDataSinks() = 0;
    virtual std::vector< int32_t > GetDataSink(const int32_t& src) = 0;
    virtual void SetDataName(const int32_t& src, const std::string& name) = 0;
    virtual std::string GetDataName(const int32_t& src) = 0;
    virtual std::map< std::string, std::string > GetSinkSessionStatistics(const int32_t& src, const int32_t& typ, const int32_t& session) = 0;
    virtual std::vector< std::vector< int32_t > > GetSessions() = 0;
    virtual void AddEventRXMask(const int32_t& src, const std::vector< int32_t >& cmdlist) = 0;
    virtual std::vector< int32_t > GetEventRXMask(const int32_t& src) = 0;
    virtual void RemoveEventRXMask(const int32_t& src, const std::vector< int32_t >& cmdlist) = 0;

public:

    /* signal emitters for this interface
     */
    void sinkchange(const int32_t& arg1)
    {
        ::DBus::SignalMessage sig("sinkchange");
        ::DBus::MessageIter wi = sig.writer();
        wi << arg1;
        emit_signal(sig);
    }
    void recordingstate(const bool& arg1)
    {
        ::DBus::SignalMessage sig("recordingstate");
        ::DBus::MessageIter wi = sig.writer();
        wi << arg1;
        emit_signal(sig);
    }

private:

    /* unmarshalers (to unpack the DBus message before calling the actual interface method)
     */
    ::DBus::Message _GetName_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argout1 = GetName();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _StartRecording_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        StartRecording();
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _StopRecording_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        StopRecording();
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _GetRecordingState_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        bool argout1 = GetRecordingState();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _EnableDataSink_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        int32_t argin1; ri >> argin1;
        int32_t argin2; ri >> argin2;
        EnableDataSink(argin1, argin2);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _DisableDataSink_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        int32_t argin1; ri >> argin1;
        int32_t argin2; ri >> argin2;
        DisableDataSink(argin1, argin2);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _GetDataSinks_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< std::string > argout1 = GetDataSinks();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _GetDataSink_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        int32_t argin1; ri >> argin1;
        std::vector< int32_t > argout1 = GetDataSink(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _SetDataName_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        int32_t argin1; ri >> argin1;
        std::string argin2; ri >> argin2;
        SetDataName(argin1, argin2);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _GetDataName_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        int32_t argin1; ri >> argin1;
        std::string argout1 = GetDataName(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _GetSinkSessionStatistics_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        int32_t argin1; ri >> argin1;
        int32_t argin2; ri >> argin2;
        int32_t argin3; ri >> argin3;
        std::map< std::string, std::string > argout1 = GetSinkSessionStatistics(argin1, argin2, argin3);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _GetSessions_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< std::vector< int32_t > > argout1 = GetSessions();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _AddEventRXMask_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        int32_t argin1; ri >> argin1;
        std::vector< int32_t > argin2; ri >> argin2;
        AddEventRXMask(argin1, argin2);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _GetEventRXMask_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        int32_t argin1; ri >> argin1;
        std::vector< int32_t > argout1 = GetEventRXMask(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _RemoveEventRXMask_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        int32_t argin1; ri >> argin1;
        std::vector< int32_t > argin2; ri >> argin2;
        RemoveEventRXMask(argin1, argin2);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
};

} } 
#endif//__dbusxx__dbusepochadaptor_h__ADAPTOR_MARSHAL_H
