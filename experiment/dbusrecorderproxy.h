
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx__dbusrecorderproxy_h__PROXY_MARSHAL_H
#define __dbusxx__dbusrecorderproxy_h__PROXY_MARSHAL_H

#include <dbus-c++/dbus.h>

namespace soma {
namespace recording {

class Manager_proxy
 : public ::DBus::InterfaceProxy
{
public:

    Manager_proxy()
    : ::DBus::InterfaceProxy("soma.recording.Manager")
    {
        connect_signal(Manager_proxy, ExperimentAvailable, _ExperimentAvailable_stub);
        connect_signal(Manager_proxy, StatsUpdate, _StatsUpdate_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    std::vector< std::string > ListAvailableExperiments()
    {
        ::DBus::CallMessage call;
        call.member("ListAvailableExperiments");
        ::DBus::Message ret = invoke_method(call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< std::string > argout;
        ri >> argout;
        return argout;
    }

    std::vector< std::string > ListOpenExperiments()
    {
        ::DBus::CallMessage call;
        call.member("ListOpenExperiments");
        ::DBus::Message ret = invoke_method(call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< std::string > argout;
        ri >> argout;
        return argout;
    }

    void OpenExperiment(const std::string& name)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << name;
        call.member("OpenExperiment");
        ::DBus::Message ret = invoke_method(call);
    }

    void CreateExperiment(const std::string& name)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << name;
        call.member("CreateExperiment");
        ::DBus::Message ret = invoke_method(call);
    }

    std::map< std::string, std::string > GetStatistics()
    {
        ::DBus::CallMessage call;
        call.member("GetStatistics");
        ::DBus::Message ret = invoke_method(call);
        ::DBus::MessageIter ri = ret.reader();

        std::map< std::string, std::string > argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */
    virtual void ExperimentAvailable(const std::string& objconn) = 0;
    virtual void StatsUpdate(const std::string& objconn) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _ExperimentAvailable_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        std::string objconn; ri >> objconn;
        ExperimentAvailable(objconn);
    }
    void _StatsUpdate_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        std::string objconn; ri >> objconn;
        StatsUpdate(objconn);
    }
};

} } 
namespace soma {
namespace recording {

class ExperimentRegistry_proxy
 : public ::DBus::InterfaceProxy
{
public:

    ExperimentRegistry_proxy()
    : ::DBus::InterfaceProxy("soma.recording.ExperimentRegistry")
    {
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    void Register(const std::string& filename)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << filename;
        call.member("Register");
        ::DBus::Message ret = invoke_method(call);
    }

    void Unregister()
    {
        ::DBus::CallMessage call;
        call.member("Unregister");
        ::DBus::Message ret = invoke_method(call);
    }


public:

    /* signal handlers for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
};

} } 
#endif//__dbusxx__dbusrecorderproxy_h__PROXY_MARSHAL_H
