
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx__dbusrecorderadaptor_h__ADAPTOR_MARSHAL_H
#define __dbusxx__dbusrecorderadaptor_h__ADAPTOR_MARSHAL_H

#include <dbus-c++/dbus.h>

namespace soma {
namespace recording {

class Recorder
: public ::DBus::InterfaceAdaptor
{
public:

    Recorder()
    : ::DBus::InterfaceAdaptor("soma.recording.Recorder")
    {
        register_method(Recorder, ListOpenExperiments, _ListOpenExperiments_stub);
        register_method(Recorder, ListAvailableExperiments, _ListAvailableExperiments_stub);
        register_method(Recorder, OpenExperiment, _OpenExperiment_stub);
        register_method(Recorder, CreateExperiment, _CreateExperiment_stub);
        register_method(Recorder, GetStatistics, _GetStatistics_stub);
    }

    ::DBus::IntrospectedInterface *const introspect() const 
    {
        static ::DBus::IntrospectedArgument ListOpenExperiments_args[] = 
        {
            { "results", "as", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument ListAvailableExperiments_args[] = 
        {
            { "results", "as", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument OpenExperiment_args[] = 
        {
            { "name", "s", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument CreateExperiment_args[] = 
        {
            { "name", "s", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument GetStatistics_args[] = 
        {
            { "stats", "a{ss}", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument experimentavailable_args[] = 
        {
            { "objconn", "s", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedMethod Recorder_methods[] = 
        {
            { "ListOpenExperiments", ListOpenExperiments_args },
            { "ListAvailableExperiments", ListAvailableExperiments_args },
            { "OpenExperiment", OpenExperiment_args },
            { "CreateExperiment", CreateExperiment_args },
            { "GetStatistics", GetStatistics_args },
            { 0, 0 }
        };
        static ::DBus::IntrospectedMethod Recorder_signals[] = 
        {
            { "experimentavailable", experimentavailable_args },
            { 0, 0 }
        };
        static ::DBus::IntrospectedProperty Recorder_properties[] = 
        {
            { 0, 0, 0, 0 }
        };
        static ::DBus::IntrospectedInterface Recorder_interface = 
        {
            "soma.recording.Recorder",
            Recorder_methods,
            Recorder_signals,
            Recorder_properties
        };
        return &Recorder_interface;
    }

public:

    /* properties exposed by this interface, use
     * property() and property(value) to get and set a particular property
     */

public:

    /* methods exported by this interface,
     * you will have to implement them in your ObjectAdaptor
     */
    virtual std::vector< std::string > ListOpenExperiments() = 0;
    virtual std::vector< std::string > ListAvailableExperiments() = 0;
    virtual void OpenExperiment(const std::string& name) = 0;
    virtual void CreateExperiment(const std::string& name) = 0;
    virtual std::map< std::string, std::string > GetStatistics() = 0;

public:

    /* signal emitters for this interface
     */
    void experimentavailable(const std::string& arg1)
    {
        ::DBus::SignalMessage sig("experimentavailable");
        ::DBus::MessageIter wi = sig.writer();
        wi << arg1;
        emit_signal(sig);
    }

private:

    /* unmarshalers (to unpack the DBus message before calling the actual interface method)
     */
    ::DBus::Message _ListOpenExperiments_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< std::string > argout1 = ListOpenExperiments();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _ListAvailableExperiments_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< std::string > argout1 = ListAvailableExperiments();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _OpenExperiment_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        OpenExperiment(argin1);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _CreateExperiment_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        CreateExperiment(argin1);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _GetStatistics_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::map< std::string, std::string > argout1 = GetStatistics();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
};

} } 
namespace soma {
namespace recording {

class ExperimentManager
: public ::DBus::InterfaceAdaptor
{
public:

    ExperimentManager()
    : ::DBus::InterfaceAdaptor("soma.recording.ExperimentManager")
    {
        register_method(ExperimentManager, RegisterExperiment, _RegisterExperiment_stub);
        register_method(ExperimentManager, UnregisterExperiment, _UnregisterExperiment_stub);
    }

    ::DBus::IntrospectedInterface *const introspect() const 
    {
        static ::DBus::IntrospectedArgument RegisterExperiment_args[] = 
        {
            { "filename", "s", true },
            { "dbusconn", "s", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument UnregisterExperiment_args[] = 
        {
            { "dbusconn", "s", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedMethod ExperimentManager_methods[] = 
        {
            { "RegisterExperiment", RegisterExperiment_args },
            { "UnregisterExperiment", UnregisterExperiment_args },
            { 0, 0 }
        };
        static ::DBus::IntrospectedMethod ExperimentManager_signals[] = 
        {
            { 0, 0 }
        };
        static ::DBus::IntrospectedProperty ExperimentManager_properties[] = 
        {
            { 0, 0, 0, 0 }
        };
        static ::DBus::IntrospectedInterface ExperimentManager_interface = 
        {
            "soma.recording.ExperimentManager",
            ExperimentManager_methods,
            ExperimentManager_signals,
            ExperimentManager_properties
        };
        return &ExperimentManager_interface;
    }

public:

    /* properties exposed by this interface, use
     * property() and property(value) to get and set a particular property
     */

public:

    /* methods exported by this interface,
     * you will have to implement them in your ObjectAdaptor
     */
    virtual void RegisterExperiment(const std::string& filename, const std::string& dbusconn) = 0;
    virtual void UnregisterExperiment(const std::string& dbusconn) = 0;

public:

    /* signal emitters for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual interface method)
     */
    ::DBus::Message _RegisterExperiment_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        std::string argin2; ri >> argin2;
        RegisterExperiment(argin1, argin2);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _UnregisterExperiment_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        UnregisterExperiment(argin1);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
};

} } 
#endif//__dbusxx__dbusrecorderadaptor_h__ADAPTOR_MARSHAL_H
